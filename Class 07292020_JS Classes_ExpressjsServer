# JavaScript Classes
## 1. Class Constructors
``` javascript
class Vehicle {
  constructor(id, numberOfWheels, sound) {
    this.id = id;
    this.numberOfWheels = numberOfWheels;
    this.sound = sound;
  }

  printInfo() {
    console.log(`This vehicle has ${this.numberOfWheels} wheels`);
    console.log(`This vehicle has an id of ${this.id}`);
  }
}
```
> **NB!** In classes you don't need the *function* key word to create a method.

> **NB!** If you keep your class in a separate file don't forget to export & import it to the file where you plan to use it.

## 2. Class Superconstructors

Sub constructors inherit parameters from the super constructor.

**Super constructor** has common arguments for all its children: *(id, numberOfWheels, sound)*
``` javascript
class Vehicle {
  constructor(id, numberOfWheels, sound) {
    this.id = id;
    this.numberOfWheels = numberOfWheels;
    this.sound = sound;
  }

  printInfo() {
    console.log(`This vehicle has ${this.numberOfWheels} wheels`);
    console.log(`This vehicle has an id of ${this.id}`);
  }
}
```
**Sub constructor** inherits common parameters from the super constructor: *(id, 4, "beep")* and sets its own unique arguments" *(id, color, passengers)*.
``` javascript
class Car extends Vehicle {
  constructor(id, color, passengers) {
    super(id, 4, "beep");
    this.color = color;
    this.passengers = passengers;
  }
  
const car = new Car(15, "blue", carPassengers);

car.printInfo();
```

> The id argument is a quite special one - it's unique for each object that is generated by your constructor. You want to keep it in the arguments list of both super and sub constructors because this is the way they are connected. It's super useful when it comes to databases that we will cover a bit later.

> **NB!** In classes you don't need the *function* key word to create a method.

> **NB!** If you keep your class in a separate file don't forget to export & import it to the file where you plan to use it.

## 3. Multiple Classes

You can create several separated classes and use them for the one bigger goal.

**Class 1**
``` javascript
class Order {
  constructor(item) {
    this.item = item;

    Order.lastId++;
    this.id = Order.lastId;
  }
}
Order.lastId = 0;
```
**Class 2**
``` javascript
class Item {
  constructor(title, price) {
    this.title = title;
    this.price = price;
  }
}
```
**Class 3**
``` javascript
class Restaurant {
  constructor(name) {
    this.name = name;
    this.orders = [];
    this.revenue = 0;
  }

  takeOrder(order) {
    this.revenue += order.item.price;
    this.orders.push(order);
    console.log(`Added #${order.id} to the queue`);
    this.printRevenue();
  }
 }
```
**Create an object as an instance of the Class 3**
``` javascript
const restaurant = new Restaurant("McJared's");
```
**Create an array of objects that are instances of the Class 2**
``` javascript
const items = [
  new Item("Burger", 5.99),
  new Item("Soda", 3.5)
];
```
**Create the new array of objects that are instances of the Class 1 by mapping through an array you were created from instances of the Class 2**
``` javascript
const orders = items.map(item => new Order(item));
```

> **NB!** In classes you don't need the *function* key word to create a method.

> **NB!** If you keep your class in a separate file don't forget to export & import it to the file where you plan to use it.

## Resources
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes

https://www.w3schools.com/js/js_object_classes.asp

https://medium.com/@onejohi/understanding-javascript-classes-4e38d355702b

https://medium.com/@luke_smaki/javascript-es6-classes-8a34b0a6720a

https://medium.com/beginners-guide-to-mobile-web-development/javascript-introduction-to-es6-classes-ecb2db9fe985
